{"version":1,"ops":[{"type":3,"author":{"name":"Michael Muré","email":"","login":"MichaelMure","avatar_url":"https://avatars1.githubusercontent.com/u/294669?v=4"},"timestamp":1534533091,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDQxMzk2MjQxNg=="},"message":"Hmm, I'm not sure what you have in mind. Could you explain in more details your usecase ?","files":null},{"type":3,"author":{"name":"","email":"","login":"johnnyutahh","avatar_url":"https://avatars0.githubusercontent.com/u/8906609?v=4"},"timestamp":1534534288,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDQxMzk2NzAzMw=="},"message":"Here's my first attempt at the thought, which is designed more to catalyze others' thought process, and possibly less to exactly specify:\n\nDocument, requirements, bugs, feature requests: they can be context-sensitive to branches just like source code is. So, as an illustration, can a bug follow and \"adapt\" to a branch same as the source-code does?\n\nA possibly different, additional feature:\nMost all other systems require a bug to manually track all the related branches (to the bug). It might be nice for a \"built-in\" (like git-bug) system to do this implicitly, or some flavor of \"automatically.\"","files":null},{"type":3,"author":{"name":"Lef Ioannidis","email":"rausted@gmail.com","login":"elefthei","avatar_url":"https://avatars0.githubusercontent.com/u/766892?v=4"},"timestamp":1534535196,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDQxMzk3MDQxMQ==","github-url":"https://github.com/MichaelMure/git-bug/issues/16#issuecomment-413970411"},"message":"@johnnyutahh I don't think it makes much sense to make bugs branch sensitive. A bug is a bug on the \"master\" or \"production\" version of the repo, however hyperlinks to other branches should be available à-la-github.\n\nAs a counter argument, a bug-fix can have its own branch and pull request, in which case you'd have to chose between duplicating bugs to the new bugfix branch or keeping them in master. I say don't duplicate, and bugs refer to the project at large, not a specific branch. This also has the nice side effect of discouraging parallel, divergent, version branches.","files":null},{"type":3,"author":{"name":"Yurii Rashkovskii","email":"yrashk@gmail.com","login":"yrashk","avatar_url":"https://avatars0.githubusercontent.com/u/452?v=4"},"timestamp":1534564416,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDQxNDAzMDA1Mw=="},"message":"In the data model of SIT (a somewhat similar project to this one), making issues branchable was one of the original \"must have features\". Being designed around a simpler primitive of a file set (instead of depending on Git or any other system), it's all just files, potentially checked into a repo. Once they are checked in, they are branched at will and there are no merge conflicts because all files are considered immutable.\n\nI personally find this to be a very useful feature for back-porting, distinguishing between production/master and particularly pinpointing the state of an issue to any revision (\"how did it look *exactly* here?\", \"is this fixed on 1.0 branch?\", etc.)","files":null},{"type":3,"author":{"name":"gedw99","email":"","login":"gedw99","avatar_url":"https://avatars0.githubusercontent.com/u/20677314?v=4"},"timestamp":1534571655,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDQxNDAzNDYyOA==","github-url":"https://github.com/MichaelMure/git-bug/issues/16#issuecomment-414034628"},"message":"This discussion raises two really important questions for me.\n\nThere are two wishes and their own use cases backing them.\n\n1. \"branch insensitive\". - You want bugs ( which is a type of document) to be global ( branch independent) to a repo and so reference issues across different paths. \n@MichaelMure  is talking about this.\n\n2 \"branch sensitive\". - You want documents to live in branches.\n@yrashk is talking this this\n\n--\n\nI can see both being really useful. Branch Sensitive expands the use cases to allow the Git repo to be used as a Document Store and Synchronisation system, which is pretty cool. THis whole area is being explored using CRT, OT, etc etc and is really had to get right.  Its a hugely valuable thing to me i admit because it really allows expansion of the use cases.\n\nI dont want to push either, because git-bug has its focus and Branch sensitive is expanding the scope.\nAlso Branch sensitive ONLY works with no potential merge conflicts because its uses OT techniques. This allows merges from one branch into another and with the lamport clocks allows ordering and so removes potential conflicts. \n@yrashk A very neat trick and i gotta say good stuff as lots of people being trying hard to get that working well.","files":null},{"type":3,"author":{"name":"Yurii Rashkovskii","email":"yrashk@gmail.com","login":"yrashk","avatar_url":"https://avatars0.githubusercontent.com/u/452?v=4"},"timestamp":1534573189,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDQxNDAzNTcwOA=="},"message":"@gedw99 in my case, I solved this without lamport clocks but rather a content-addressable DAG. Each record in SIT can reference 0..n parents and this forms a DAG. With this, and each record (which is just a directory with files) being immutable, I am avoiding merge conflicts.","files":null},{"type":3,"author":{"name":"Michael Muré","email":"","login":"MichaelMure","avatar_url":"https://avatars1.githubusercontent.com/u/294669?v=4"},"timestamp":1534593328,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDQxNDA1MjgzMg=="},"message":"For the record, Lamport clock are used in git-bug only to order bugs between each other. There is no clock involved inside a single bug. The ordering of the edit operations is fixed by the chain of commit and the position of each operation in the array of OperationPack.","files":null},{"type":3,"author":{"name":"Berkus Decker","email":"","login":"berkus","avatar_url":"https://avatars3.githubusercontent.com/u/80306?v=4"},"timestamp":1534718707,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDQxNDE2MTM3OQ==","github-url":"https://github.com/MichaelMure/git-bug/issues/16#issuecomment-414161379"},"message":"Just to confirm — current version of git-bug does NOT track bugs differently in different branches bug state is thus global to the repository?","files":null},{"type":3,"author":{"name":"Michael Muré","email":"","login":"MichaelMure","avatar_url":"https://avatars1.githubusercontent.com/u/294669?v=4"},"timestamp":1534719936,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDQxNDE2MjQ2MA=="},"message":"@berkus That's correct. The data model and the storage is entirely decoupled from the normal code.\n\nBut it's still possible to make git-bug understand what a branch is and make it track where and how a bug is resolved.\n\nIt would be interesting to see which bug trackers have this feature and how they handle this problem.","files":null},{"type":2,"author":{"name":"Michael Muré","email":"","login":"MichaelMure","avatar_url":"https://avatars1.githubusercontent.com/u/294669?v=4"},"timestamp":1534720018,"metadata":{"github-id":"MDE3OlJlbmFtZWRUaXRsZUV2ZW50MTc5NjUyODMzMQ=="},"title":"Question: can git-bug be aware of branches and commits ?","was":"Question: can git-bug be aware of branches and commits ?"},{"type":3,"author":{"name":"Yurii Rashkovskii","email":"yrashk@gmail.com","login":"yrashk","avatar_url":"https://avatars0.githubusercontent.com/u/452?v=4"},"timestamp":1534725294,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDQxNDE2NzU1OQ=="},"message":"As for other trackers, as I mentioned before, SIT is not only branch-aware but revision-aware as its  shares the namespace with the normal files (when used in conjunction with SCM). This has its pros and cons. Main con is that it exposes these files and their changes to the users. Some pros are: being able to pinpoint issue state, being able to affect issue(s) from within patches, easing transition between version control tools, etc.\n\nI believe that issues can't be \"global\" -- their content and state always have a context. That's why the design choice to make this data live alongside with the primary content was made. \n\nFrom what I remember, I don't remember any decentralized (and merge-conflict-free) issue tracker do anything similar. Though I might have missed some.","files":null},{"type":3,"author":{"name":"Berkus Decker","email":"","login":"berkus","avatar_url":"https://avatars3.githubusercontent.com/u/80306?v=4"},"timestamp":1534976369,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDQxNTIwMDQ3Mg=="},"message":"http://www.bugseverywhere.org/ is also tracking bugs in branches and \"merges\" ticket resolution together with branch merges.","files":null},{"type":3,"author":{"name":"Michael Muré","email":"","login":"MichaelMure","avatar_url":"https://avatars1.githubusercontent.com/u/294669?v=4"},"timestamp":1534981974,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDQxNTIyNTE2Ng=="},"message":"@berkus bugseverywhere gain this feature by storing bugs data in regular branches, which is something git-bug try to avoid. The question is rather if and how git-bug should be made aware of the normal coding process.\n\nI see two possibilities:\n\n- an \"active\" solution: git-bug listen (via hooks) to events in git (commit, merge ...) and trigger bug changes from that\n- a \"passive\" solution: git-bug store extra metadata (for example, what branch is concerned by the bug, what commit fix it), and is able to compute on demand the bug status (is the bug fixed in the current branch ?)\n\nA passive solution would be easier imho, but this needs more though. This is not only a technical question, it's also what feature do we really want here.","files":null},{"type":5,"author":{"name":"Michael Muré","email":"","login":"MichaelMure","avatar_url":"https://avatars1.githubusercontent.com/u/294669?v=4"},"timestamp":1534982694,"metadata":{"github-id":"MDEyOkxhYmVsZWRFdmVudDE4MDM5OTc1MjQ="},"added":["Core"],"removed":null},{"type":3,"author":{"name":"Julian Ganz","email":"","login":"neithernut","avatar_url":"https://avatars0.githubusercontent.com/u/6747556?v=4"},"timestamp":1535010036,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDQxNTMyMjE1Mw==","github-url":"https://github.com/MichaelMure/git-bug/issues/16#issuecomment-415322153"},"message":"FYI: [git-dit](https://github.com/neithernut/git-dit) allows cross-referencing between issues and from one issue to an arbitrary revision using the parent reference of a commit.\n\nFor accumulating metadata and other mechanics confined to a single issue, we only use the first parent of a commit. All other parents are considered references to data external to the issue. This allows, for example, to refer to a revision in which an issue was resolved when closing it. We don't have any real tooling for using those references yet, though.","files":null}]}