{"version":1,"ops":[{"type":5,"author":{"name":"Michael Muré","email":"","login":"MichaelMure","avatar_url":"https://avatars1.githubusercontent.com/u/294669?v=4"},"timestamp":1533556978,"metadata":{"github-id":"MDEyOkxhYmVsZWRFdmVudDE3NzI3MTQ2ODM="},"added":["RFC"],"removed":null},{"type":3,"author":{"name":"","email":"quae@daurnimator.com","login":"daurnimator","avatar_url":"https://avatars1.githubusercontent.com/u/127971?v=4"},"timestamp":1534511191,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDQxMzg1OTMwNA=="},"message":"I just found the project via hackernews. I'd love to give this sort of thing a try, and integrate it into other tools. However using go serialisation rules out all my languages of choice.\n\nI'd say use something JSON based, or if that's not enough, [CBOR](http://cbor.io/).","files":null},{"type":3,"author":{"name":"Michael Muré","email":"","login":"MichaelMure","avatar_url":"https://avatars1.githubusercontent.com/u/294669?v=4"},"timestamp":1534512412,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDQxMzg2NTQ1OQ=="},"message":"For the record, it would be an easy change to use something else, it's only a few lines of code: https://github.com/MichaelMure/git-bug/blob/d959acc29dcbc467790ae87389f9569bb830c8c6/bug/operation_pack.go#L25-L52","files":null},{"type":3,"author":{"name":"Luke Champine","email":"luke@lukechampine.com","login":"lukechampine","avatar_url":"https://avatars2.githubusercontent.com/u/3344749?v=4"},"timestamp":1534531487,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDQxMzk1NTgwMA=="},"message":"My two cents: `gob` is convenient and efficient, but not a great choice if you want interop with other languages. Unfortunately there just aren't many binary formats that are widely supported, except perhaps protobufs.\n\nJSON is probably your best bet. As you noted, it will be compressed anyway, and if performance is an issue you can always switch to a faster JSON encoder. The only big downside to JSON that I'm aware of is poor support for encoding binary blobs (`encoding/json` encodes `[]byte` as a base-64 string). But if `OperationPack` is almost entirely textual data anyway, there's little reason to worry about that.","files":null},{"type":3,"author":{"name":"Ævar Arnfjörð Bjarmason","email":"avarab@gmail.com","login":"avar","avatar_url":"https://avatars3.githubusercontent.com/u/45301?v=4"},"timestamp":1534537987,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDQxMzk4MDgwMQ=="},"message":"Git does its own delta-compression on top of zlib. You should decide this using a combination of whatever format needs you have (can you add more fields, is it extensible etc.), and how git manages to compress this using both delta compression and zlib, which you can figure out using a large enough set of realistic test data.","files":null},{"type":3,"author":{"name":"Michael Muré","email":"","login":"MichaelMure","avatar_url":"https://avatars1.githubusercontent.com/u/294669?v=4"},"timestamp":1534539446,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDQxMzk4NjI4NQ=="},"message":"To give more details about the requirement, OperationPack hold currently very simple data (string, int, array..), and it's likely to stay the same even when adding new operations. For instance, embedded files are stored in git blobs and then linked in the git tree.\n\nThe only tricky part is that an OperationPack is an mixed array of Operation so the decoder need to support that and match the correct go struct for each operation.","files":null},{"type":3,"author":{"name":"Michael Muré","email":"","login":"MichaelMure","avatar_url":"https://avatars1.githubusercontent.com/u/294669?v=4"},"timestamp":1534720787,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDQxNDE2MzE4NA=="},"message":"With all these format that could fit the bill, the best way to choose would be a benchmark for both performance and blob size for several format (at least JSON and CBOR). Who knows how the git compression behave on something that is already binary.\n\nMaybe the git people could do an educated guess.","files":null},{"type":3,"author":{"name":"Jed Fox","email":"git@twopointzero.us","login":"j-f1","avatar_url":"https://avatars2.githubusercontent.com/u/25517624?v=4"},"timestamp":1534941232,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDQxNTAxNjE1Mg=="},"message":"[MessagePack](https://msgpack.org/) is another option, but I feel like MessagePack and CBOR are both designed for getting the smallest possible representation of data, whereas JSON is designed to be human-readable, ASCII-compatible, and simple to parse. Compare [JSON’s spec](https://json.org/) (the sidebar) with the [CBOR](https://github.com/cbor/spec-with-errata-fixed/blob/master/rfc7049-errata-corrected.txt) and [MessagePack](https://github.com/msgpack/msgpack/blob/master/spec.md) specs.","files":null},{"type":5,"author":{"name":"Michael Muré","email":"","login":"MichaelMure","avatar_url":"https://avatars1.githubusercontent.com/u/294669?v=4"},"timestamp":1534982693,"metadata":{"github-id":"MDEyOkxhYmVsZWRFdmVudDE4MDM5OTc1MDE="},"added":["Core"],"removed":null},{"type":3,"author":{"name":"Michael Muré","email":"","login":"MichaelMure","avatar_url":"https://avatars1.githubusercontent.com/u/294669?v=4"},"timestamp":1536236417,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDQxOTA3Mjk2Ng=="},"message":"I wrote some [throwaway code](https://github.com/MichaelMure/git-bug/tree/serialisation-test) to test the resulting blob size for various format. Here is one run:\n\n\u003e Creating repo: /tmp/512275589\n\u003e \n\u003e GOB\n\u003e raw: 5210, git: 2216, ratio: 42.53359%\n\u003e raw: 5536, git: 2320, ratio: 41.907513%\n\u003e raw: 3987, git: 1768, ratio: 44.34412%\n\u003e raw: 4407, git: 1893, ratio: 42.95439%\n\u003e raw: 6368, git: 2593, ratio: 40.71922%\n\u003e raw: 4905, git: 2143, ratio: 43.690113%\n\u003e raw: 6524, git: 2660, ratio: 40.772533%\n\u003e raw: 3315, git: 1549, ratio: 46.726997%\n\u003e raw: 4116, git: 1780, ratio: 43.24587%\n\u003e raw: 3928, git: 1751, ratio: 44.577393%\n\u003e total: 20673\n\u003e \n\u003e JSON\n\u003e raw: 4862, git: 1966, ratio: 40.436035%\n\u003e raw: 5188, git: 2072, ratio: 39.93832%\n\u003e raw: 3633, git: 1528, ratio: 42.058907%\n\u003e raw: 4055, git: 1657, ratio: 40.863132%\n\u003e raw: 6026, git: 2339, ratio: 38.815136%\n\u003e raw: 4555, git: 1903, ratio: 41.778267%\n\u003e raw: 6184, git: 2411, ratio: 38.987713%\n\u003e raw: 2965, git: 1314, ratio: 44.31703%\n\u003e raw: 3764, git: 1551, ratio: 41.20616%\n\u003e raw: 3568, git: 1515, ratio: 42.460762%\n\u003e total: 18256\n\u003e \n\u003e CBOR\n\u003e raw: 4746, git: 1961, ratio: 41.319008%\n\u003e raw: 5071, git: 2065, ratio: 40.72175%\n\u003e raw: 3524, git: 1527, ratio: 43.33144%\n\u003e raw: 3944, git: 1656, ratio: 41.98783%\n\u003e raw: 5902, git: 2337, ratio: 39.59675%\n\u003e raw: 4440, git: 1899, ratio: 42.77027%\n\u003e raw: 6062, git: 2410, ratio: 39.755856%\n\u003e raw: 2852, git: 1308, ratio: 45.862553%\n\u003e raw: 3652, git: 1543, ratio: 42.25082%\n\u003e raw: 3463, git: 1507, ratio: 43.51718%\n\u003e total: 18213\n\u003e \n\u003e MsgPack\n\u003e raw: 4746, git: 1980, ratio: 41.71934%\n\u003e raw: 5072, git: 2087, ratio: 41.147476%\n\u003e raw: 3521, git: 1541, ratio: 43.765976%\n\u003e raw: 3941, git: 1665, ratio: 42.24816%\n\u003e raw: 5902, git: 2357, ratio: 39.935616%\n\u003e raw: 4439, git: 1914, ratio: 43.117817%\n\u003e raw: 6060, git: 2425, ratio: 40.016502%\n\u003e raw: 2853, git: 1323, ratio: 46.372242%\n\u003e raw: 3654, git: 1558, ratio: 42.638203%\n\u003e raw: 3464, git: 1526, ratio: 44.053116%\n\u003e total: 18376\n\nAs expected, there is not that much differences after encoding + compression. CBOR consistently win the size contest though.","files":null},{"type":3,"author":{"name":"Michael Muré","email":"","login":"MichaelMure","avatar_url":"https://avatars1.githubusercontent.com/u/294669?v=4"},"timestamp":1536236597,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDQxOTA3Mzc0NQ=="},"message":"Note: each serialization format is tested on the same set of randomly generated OperationPack with one `Create` and 4 `AddComment` ops.","files":null},{"type":3,"author":{"name":"Ævar Arnfjörð Bjarmason","email":"avarab@gmail.com","login":"avar","avatar_url":"https://avatars3.githubusercontent.com/u/45301?v=4"},"timestamp":1536245207,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDQxOTEyMTU5NQ=="},"message":"@MichaelMure This test case really isn't meaningful. You're just testing how a given payload compresses with zlib when creating loose objects, since when you add a new object it's compressed, a header is added to it, and it's added to the object store.\n\nInstead, you should after every addition do `git add \u0026\u0026 git commit \u0026\u0026 git gc`. Then measure the total size of the now-packed .git/objects directory, not individual objects.\n\nAt that point, these objects will be delta-compressed, so you can see how the size of the repo grows as they're added.\n\nThe size of individual objects is pretty much irrelevant. You can have 10 objects that are all 1GB, but delta-compress down to 1GB + 1MB or whatever, or 10GB if they don't delta-compress at all.","files":null},{"type":3,"author":{"name":"Ævar Arnfjörð Bjarmason","email":"avarab@gmail.com","login":"avar","avatar_url":"https://avatars3.githubusercontent.com/u/45301?v=4"},"timestamp":1536245566,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDQxOTEyMzkzMg=="},"message":"@MichaelMure Also in reply to:\n\n\u003e Who knows how the git compression behave on something that is already binary.\n\nI'm sure there's some obscure edge case where the compression is tweaked for textual content in some way that'll prove me wrong, but in general this doesn't matter at all.\n\nGit's just as good at delta-compressing binary data and non-binary data. What it's not good at compressing (and this goes for any compression), is data that's wildly different from one object to the next.\n\nIt just so happens that *generally* binary data is less delta-compressible, think say two *.mp3s with different songs v.s. a *.txt change to its lyrics.\n\nBut for these sort of pack formats I wouldn't expect them to delta-compress any worse than say JSON. It's going to be other things that matter, e.g. let's say you use a JSON encoder  where the keys of the payload aren't sorted, and thus are different every time, that'll compress worse than if they're sorted, same for doing the same in some binary key-value format.\n\nI do think that for UI purposes it makes sense to pick a widely implemented \u0026 used text format like JSON for introspection purposes and the availability of tooling (e.g. `jq`), if the compression numbers for it aren't much worse that is.","files":null},{"type":3,"author":{"name":"Michael Muré","email":"","login":"MichaelMure","avatar_url":"https://avatars1.githubusercontent.com/u/294669?v=4"},"timestamp":1536245735,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDQxOTEyNTAxOQ=="},"message":"That's a good point, I'll check the repo size as well, before and after a `git gc`.","files":null},{"type":3,"author":{"name":"Michael Muré","email":"","login":"MichaelMure","avatar_url":"https://avatars1.githubusercontent.com/u/294669?v=4"},"timestamp":1536264512,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDQxOTIyNDU0OA=="},"message":"Alright, another run with the size of the repo before and after a `git gc` (initial empty size substracted), 1000 OperationPack serialized:\n\n```\nGOB\nCreating repo: /tmp/272689118\nraw: 4446, git: 1944, ratio: 43.724697%\nraw: 4774, git: 2075, ratio: 43.4646%\nraw: 5075, git: 2203, ratio: 43.408867%\nraw: 4135, git: 1795, ratio: 43.409916%\nraw: 5901, git: 2437, ratio: 41.298084%\nraw: 2919, git: 1372, ratio: 47.0024%\nraw: 4974, git: 2098, ratio: 42.179333%\nraw: 5074, git: 2153, ratio: 42.432007%\nraw: 3600, git: 1613, ratio: 44.805557%\nraw: 4663, git: 2016, ratio: 43.23397%\n...\nUnpacked: 1926463\nGC packed: 1926510\nPacking diff: 47\nGC packed aggressive: 1926510\nPacking diff: 0\n\nJSON\nCreating repo: /tmp/263735205\nraw: 4094, git: 1706, ratio: 41.67074%\nraw: 4428, git: 1837, ratio: 41.485996%\nraw: 4731, git: 1968, ratio: 41.597973%\nraw: 3776, git: 1547, ratio: 40.96928%\nraw: 5554, git: 2192, ratio: 39.467052%\nraw: 2566, git: 1136, ratio: 44.27124%\nraw: 4628, git: 1863, ratio: 40.254967%\nraw: 4732, git: 1921, ratio: 40.595943%\nraw: 3242, git: 1377, ratio: 42.47378%\nraw: 4320, git: 1773, ratio: 41.041668%\n...\nUnpacked: 1687200\nGC packed: 1687247\nPacking diff: 47\nGC packed aggressive: 1687247\nPacking diff: 0\n\nCBOR\nCreating repo: /tmp/701783232\nraw: 3984, git: 1705, ratio: 42.796185%\nraw: 4311, git: 1838, ratio: 42.63512%\nraw: 4613, git: 1965, ratio: 42.597008%\nraw: 3674, git: 1550, ratio: 42.18835%\nraw: 5438, git: 2192, ratio: 40.308937%\nraw: 2462, git: 1134, ratio: 46.060116%\nraw: 4514, git: 1863, ratio: 41.2716%\nraw: 4613, git: 1916, ratio: 41.534794%\nraw: 3137, git: 1376, ratio: 43.863564%\nraw: 4202, git: 1766, ratio: 42.027603%\n...\nUnpacked: 1685158\nGC packed: 1685205\nPacking diff: 47\nGC packed aggressive: 1685205\nPacking diff: 0\n\nMsgPack\nCreating repo: /tmp/132917535\nraw: 3984, git: 1723, ratio: 43.247993%\nraw: 4310, git: 1854, ratio: 43.01624%\nraw: 4611, git: 1985, ratio: 43.049232%\nraw: 3672, git: 1562, ratio: 42.538128%\nraw: 5436, git: 2204, ratio: 40.544518%\nraw: 2460, git: 1152, ratio: 46.82927%\nraw: 4512, git: 1875, ratio: 41.55585%\nraw: 4614, git: 1932, ratio: 41.872562%\nraw: 3138, git: 1395, ratio: 44.455067%\nraw: 4202, git: 1783, ratio: 42.432175%\n...\nUnpacked: 1700178\nGC packed: 1700225\nPacking diff: 47\nGC packed aggressive: 1700225\nPacking diff: 0\n```\n\nWhatever the format, there is no compression taking advantage of the similarity between each OperationPack. The packed repo is actually bigger by 47 bytes, and a `git gc --agressive` does nothing.","files":null},{"type":3,"author":{"name":"Michael Muré","email":"","login":"MichaelMure","avatar_url":"https://avatars1.githubusercontent.com/u/294669?v=4"},"timestamp":1536265389,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDQxOTIyODY3Mg=="},"message":"Another run with 100k OperationPack (so 500k operations), just for the sake of it:\n\n```\nGOB\nCreating repo: /tmp/235087672\nraw: 3231, git: 1492, ratio: 46.177654%\nraw: 4688, git: 2097, ratio: 44.731228%\nraw: 3611, git: 1625, ratio: 45.001385%\nraw: 3566, git: 1620, ratio: 45.42905%\nraw: 3911, git: 1718, ratio: 43.927383%\nraw: 6047, git: 2526, ratio: 41.77278%\nraw: 3487, git: 1595, ratio: 45.741325%\nraw: 5425, git: 2267, ratio: 41.788017%\nraw: 3013, git: 1341, ratio: 44.507137%\nraw: 6101, git: 2549, ratio: 41.780037%\n...\nUnpacked: 194 MB\nGC packed: 194 MB\nPacking diff: 47\nGC packed aggressive: 194 MB\nPacking diff: 0\n\nJSON\nCreating repo: /tmp/145768759\nraw: 2870, git: 1261, ratio: 43.937283%\nraw: 4332, git: 1842, ratio: 42.520775%\nraw: 3248, git: 1398, ratio: 43.041874%\nraw: 3215, git: 1392, ratio: 43.297047%\nraw: 3553, git: 1485, ratio: 41.795666%\nraw: 5699, git: 2280, ratio: 40.00702%\nraw: 3130, git: 1356, ratio: 43.32268%\nraw: 5083, git: 2032, ratio: 39.97639%\nraw: 2660, git: 1119, ratio: 42.06767%\nraw: 5753, git: 2301, ratio: 39.99652%\n...\nUnpacked: 170 MB\nGC packed: 170 MB\nPacking diff: 47\nGC packed aggressive: 170 MB\nPacking diff: 0\n\nCBOR\nCreating repo: /tmp/170025770\nraw: 2773, git: 1255, ratio: 45.257843%\nraw: 4227, git: 1851, ratio: 43.789925%\nraw: 3149, git: 1395, ratio: 44.299778%\nraw: 3107, git: 1395, ratio: 44.898617%\nraw: 3448, git: 1480, ratio: 42.92343%\nraw: 5587, git: 2284, ratio: 40.880615%\nraw: 3027, git: 1363, ratio: 45.02808%\nraw: 4964, git: 2030, ratio: 40.89444%\nraw: 2558, git: 1113, ratio: 43.510555%\nraw: 5641, git: 2300, ratio: 40.77291%\n...\nUnpacked: 170 MB\nGC packed: 170 MB\nPacking diff: 47\nGC packed aggressive: 170 MB\nPacking diff: 0\n\nMsgPack\nCreating repo: /tmp/418211457\nraw: 2778, git: 1272, ratio: 45.788338%\nraw: 4228, git: 1868, ratio: 44.181644%\nraw: 3150, git: 1409, ratio: 44.73016%\nraw: 3109, git: 1408, ratio: 45.287876%\nraw: 3447, git: 1495, ratio: 43.371048%\nraw: 5587, git: 2302, ratio: 41.202793%\nraw: 3026, git: 1379, ratio: 45.571712%\nraw: 4965, git: 2041, ratio: 41.107754%\nraw: 2562, git: 1125, ratio: 43.911007%\nraw: 5641, git: 2316, ratio: 41.05655%\n...\nUnpacked: 171 MB\nGC packed: 171 MB\nPacking diff: 47\nGC packed aggressive: 171 MB\nPacking diff: 0\n```","files":null},{"type":3,"author":{"name":"Jed Fox","email":"git@twopointzero.us","login":"j-f1","avatar_url":"https://avatars2.githubusercontent.com/u/25517624?v=4"},"timestamp":1536268055,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDQxOTI0MTY0Ng=="},"message":"Interesting that JSON and CBOR end up almost the same size.","files":null},{"type":3,"author":{"name":"Ævar Arnfjörð Bjarmason","email":"avarab@gmail.com","login":"avar","avatar_url":"https://avatars3.githubusercontent.com/u/45301?v=4"},"timestamp":1536309763,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDQxOTM2Nzk0Mw=="},"message":"In a lot of cases --aggressive does nothing, since e.g. if you have files that keep growing they'll already be in the --window and --depth described in the git-repack manpage, --aggressive just tweaks those values from the default of 10/50 to 250/50. I wouldn't be surprised if for such an artificial testcase you got simliar/the same results with --window=1 --depth=1 or whatever.\n\nIs the history this go tool produces accessible somewhere?","files":null},{"type":3,"author":{"name":"Michael Muré","email":"","login":"MichaelMure","avatar_url":"https://avatars1.githubusercontent.com/u/294669?v=4"},"timestamp":1536318791,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDQxOTQwNzgwNA=="},"message":"Each OperationPack are independent, the similarities would be between them would be only the serialization format structure. There is no file growing.\n\nIt's not that surprising that git doesn't compress that.\n\n\u003e Is the history this go tool produces accessible somewhere?\n\nI'm not sure it answer your question, but have a look at https://github.com/MichaelMure/git-bug/blob/master/doc/model.md.","files":null},{"type":3,"author":{"name":"Ævar Arnfjörð Bjarmason","email":"avarab@gmail.com","login":"avar","avatar_url":"https://avatars3.githubusercontent.com/u/45301?v=4"},"timestamp":1536323212,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDQxOTQyMzcyOA=="},"message":"I mean you're producing some git data during the benchmark in a repo, is\nthe result available somewhere? I could run it myself, but then I have to\nfigure out how to run/install go etc.\n\nOn Fri, Sep 7, 2018 at 1:13 PM Michael Muré \u003cnotifications@github.com\u003e\nwrote:\n\n\u003e Each OperationPack are independent, the similarities would be between them\n\u003e would be only the serialization format structure. There is no file growing.\n\u003e\n\u003e It's not that surprising that git doesn't compress that.\n\u003e\n\u003e Is the history this go tool produces accessible somewhere?\n\u003e\n\u003e I'm not sure it answer your question, but have a look at\n\u003e https://github.com/MichaelMure/git-bug/blob/master/doc/model.md.\n\u003e\n\u003e —\n\u003e You are receiving this because you commented.\n\u003e Reply to this email directly, view it on GitHub\n\u003e \u003chttps://github.com/MichaelMure/git-bug/issues/5#issuecomment-419407804\u003e,\n\u003e or mute the thread\n\u003e \u003chttps://github.com/notifications/unsubscribe-auth/AACw9XsR4Y3Xk732raq435m7ONnOQ8BYks5uYlTJgaJpZM4Vuu9B\u003e\n\u003e .\n\u003e","files":null},{"type":3,"author":{"name":"Michael Muré","email":"","login":"MichaelMure","avatar_url":"https://avatars1.githubusercontent.com/u/294669?v=4"},"timestamp":1536329653,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDQxOTQ1Mjc0Mw=="},"message":"@avar These blobs are not tied up in a branch, it's rather impractical to push that somewhere.\nPlease install go (probably just a package), checkout the branch and run `go run misc/serial_format_research/main.go`.","files":null},{"type":3,"author":{"name":"Michael Muré","email":"","login":"MichaelMure","avatar_url":"https://avatars1.githubusercontent.com/u/294669?v=4"},"timestamp":1536765733,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDQyMDY4OTI0Mw=="},"message":"With 60fcfcdcb0e89741528cfc99a94a48f204d48e6b, I changed the serialization format for Json.\n\nHere are a few measurement with 10k random bugs and 10op/bug (100k ops total, same as the previous test):\n\n| | |\n|-|-|\n| generation \u0026 writing | 61s |\n| repo size | 161M |\n| git gc | 4s |\n| repo size | 21M |\n| cache building | 40s |\n| cache size | 1.5M |\n| bug query | 0.04s |\n\nQuite happy with these results! Note that the cache building is currently mono-processor. There is still perf to gain.\n\nAlso, now that the blobs are connected in a chain of commit, `git gc` start to actually compress them. 21Mo for 10k bugs is nice.","files":null},{"type":3,"author":{"name":"Michael Muré","email":"","login":"MichaelMure","avatar_url":"https://avatars1.githubusercontent.com/u/294669?v=4"},"timestamp":1536854545,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDQyMTA2MDUwOQ=="},"message":"With no sign of troubles after various tests, let's consider the matter resolved :-)","files":null},{"type":4,"author":{"name":"Michael Muré","email":"","login":"MichaelMure","avatar_url":"https://avatars1.githubusercontent.com/u/294669?v=4"},"timestamp":1536854545,"metadata":{"github-id":"MDExOkNsb3NlZEV2ZW50MTg0NDAzNTIwOQ=="},"status":2},{"type":3,"author":{"name":"","email":"andy@r210.com","login":"andyl","avatar_url":"https://avatars3.githubusercontent.com/u/90030?v=4"},"timestamp":1536856197,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDQyMTA2OTIyMw=="},"message":"Is there a CLI command to generate a JSON dump from the issues?","files":null},{"type":3,"author":{"name":"Michael Muré","email":"","login":"MichaelMure","avatar_url":"https://avatars1.githubusercontent.com/u/294669?v=4"},"timestamp":1536856296,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDQyMTA2OTcyOQ=="},"message":"@andyl there is not. What's your usecase ?","files":null},{"type":3,"author":{"name":"","email":"andy@r210.com","login":"andyl","avatar_url":"https://avatars3.githubusercontent.com/u/90030?v=4"},"timestamp":1536857225,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDQyMTA3NDM4OA=="},"message":"@MichaelMure I'm working on a project that allows people to post auction-style bids for issues (see bugmark.net).  We'd very much like to integrate with git-bug.  To do this, we need to be able to poll the issue repository and grab a json-like representation.  JSON would be simple for us, but if there is another way to integrate open to that too.","files":null},{"type":3,"author":{"name":"Michael Muré","email":"","login":"MichaelMure","avatar_url":"https://avatars1.githubusercontent.com/u/294669?v=4"},"timestamp":1536857455,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDQyMTA3NTU3NQ=="},"message":"@andyl that's certainly doable and should be supported by the CLI tools.\n\nCould you open a new issue where we can discuss that ?","files":null},{"type":3,"author":{"name":"","email":"andy@r210.com","login":"andyl","avatar_url":"https://avatars3.githubusercontent.com/u/90030?v=4"},"timestamp":1536858317,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDQyMTA4MDA1Mg=="},"message":"\u003e Could you open a new issue where we can discuss that ?\n\n@MichaelMure see #45","files":null}]}