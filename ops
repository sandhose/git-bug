{"version":1,"ops":[{"type":3,"author":{"name":"Michael Muré","email":"","login":"MichaelMure","avatar_url":"https://avatars1.githubusercontent.com/u/294669?v=4"},"timestamp":1535034435,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDQxNTQzNjA4MA=="},"message":"That's part of the \"master plan\". git-bug is design to be easy to pick-up for them.\n\nHowever it's probably way too early for such a push. git-bug would need to have a more stable core and data model, and attract actual users.","files":null},{"type":3,"author":{"name":"gedw99","email":"","login":"gedw99","avatar_url":"https://avatars0.githubusercontent.com/u/20677314?v=4"},"timestamp":1535122147,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDQxNTc4MjU3MQ=="},"message":"to attract stable users whats the MVP then ?\nBeing able to use git-bug with github  ? I honestly am not sure but curious the direction you want to head.","files":null},{"type":3,"author":{"name":"Michael Muré","email":"","login":"MichaelMure","avatar_url":"https://avatars1.githubusercontent.com/u/294669?v=4"},"timestamp":1535154720,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDQxNTkxMDUyNg=="},"message":"Actually there is different groups of users and thus different levels of MVP, each being a super-set of the previous.\n\nHere is how I see them and what is required to enable them:\n\n\n\n  1. autonomous project (no bugs submitted by non-dev)\n    - stable data model (mainly #5)\n  1. usage complementary to another tracker, bugs available offline as read-only\n    - incremental import from the main bug-tracker (probably github at first)\n  1. usage complementary to another tracker, bugs available offline as read/write\n    - incremental bidirectional bridge with the main bug-tracker\n  1. standalone usage\n    - webUI able to serve as a public interface to edit bugs","files":null},{"type":5,"author":{"name":"Michael Muré","email":"","login":"MichaelMure","avatar_url":"https://avatars1.githubusercontent.com/u/294669?v=4"},"timestamp":1535154860,"metadata":{"github-id":"MDEyOkxhYmVsZWRFdmVudDE4MDg3NDI1NTI="},"added":["Non-actionable"],"removed":null},{"type":3,"author":{"name":"Daniel Theophanes","email":"kardianos@gmail.com","login":"kardianos","avatar_url":"https://avatars2.githubusercontent.com/u/755121?v=4"},"timestamp":1536620983,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDQyMDA5MDkwMg=="},"message":"Out of curiosity, is there a substantial difference between git-bug's internal storage method and NoteDB https://gerrit-review.googlesource.com/Documentation/note-db.html ?","files":null},{"type":3,"author":{"name":"Michael Muré","email":"","login":"MichaelMure","avatar_url":"https://avatars1.githubusercontent.com/u/294669?v=4"},"timestamp":1536664552,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDQyMDIzNzgzNg=="},"message":"From what I gather from [this](https://storage.googleapis.com/gerrit-talks/summit/2015/NoteDB.pdf), it's generally the same idea with some differences. The slides are a bit light in details so it's more an educated guess.\n\nBoth git-bug and NoteDb store data in a (linear for git-but, not sure for NoteDb) chain of commit accessible through a ref, don't pollute the normal code workflow and rely on git for storing/transport of the data.\n\nHowever, NoteDb **seems** to store data as key/value pairs in commit message. git-bug goes [further than that](https://github.com/MichaelMure/git-bug/blob/master/doc/model.md) and store arbitrary data in git Blob and Tree, and tie them in a chain of commits. This gives the sames guarantees but allow for a more flexible format. As an example, git-bug can store files for the embedded media  in comments and have them managed by git as well. This data model also helps to implement the conflict-free merge.\n\nI don't think that Gerrit needs to have that flexibility or merging data, so I'd say it's good enough for them.","files":null}]}